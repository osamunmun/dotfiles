"vundle 対応
set nocompatible
"Please set your own Neobundle directory.
if has('vim_starting')
  set runtimepath+=~/Dropbox/dotfiles/vim/vimfiles/bundle/neobundle.vim
endif
call neobundle#rc(expand('~/.vim/bundle/'))
filetype plugin off
filetype indent off

NeoBundleFetch 'http://github.com/Shougo/neobundle.vim'

NeoBundle 'http://github.com/Shougo/vimproc'
NeoBundle 'http://github.com/Shougo/unite.vim'
NeoBundle 'http://github.com/Shougo/vimfiler'
NeoBundle 'http://github.com/Shougo/neosnippet'
NeoBundle 'http://github.com/Shougo/vimshell.git'
NeoBundle 'http://github.com/tpope/vim-rails.git'
NeoBundle 'http://github.com/Shougo/neocomplcache'
NeoBundle 'http://github.com/nathanaelkane/vim-indent-guides'
NeoBundle 'http://github.com/thinca/vim-quickrun.git'
NeoBundle 'http://github.com/vim-scripts/ref.vim'
NeoBundle 'http://github.com/taichouchou2/alpaca_powertabline'
NeoBundle 'http://github.com/vim-ruby/vim-ruby'
NeoBundle 'http://github.com/scrooloose/syntastic'
NeoBundle 'http://github.com/tomtom/tcomment_vim'
NeoBundle 'http://github.com/kana/vim-surround'
NeoBundle 'http://github.com/vim-scripts/grep.vim.git'
NeoBundle 'http://github.com/vim-scripts/sudo.vim.git'
NeoBundle 'http://github.com/LeafCage/foldCC.git'
NeoBundle 'http://github.com/vim-scripts/ruby-matchit.git'
NeoBundle 'http://github.com/tpope/vim-endwise'
NeoBundle 'http://github.com/vim-scripts/yanktmp.vim.git'
NeoBundle 'http://github.com/h1mesuke/vim-alignta.git'
NeoBundle 'https://github.com/slim-template/vim-slim.git'

filetype plugin on
filetype indent on
NeoBundleCheck

" Color Scheme
"colorscheme molokai
syntax on
colorscheme railscasts

set expandtab
set shiftwidth=2
set nocompatible
set number
set showmatch
set clipboard=unnamed,autoselect
"set ts=4 sw=4 et
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=7
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=3
autocmd BufRead,BufNewFile  *.md,*.MD set filetype=markdown
"保存時に行末の空白を自動で削除
autocmd BufWritePre * :%s/\s\+$//e

"neocomplcache用（自動補完）
let g:neocomplcache_enable_at_startup = 1
"区切りの補完を有効化
let g:neocomplcache_enable_underbar_completion = 1
" シンタックスをキャッシュするときの最小文字長を3
let g:neocomplcache_min_syntax_length = 3
"Enable heavy omni completion. ruby用
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *¥t]¥.¥w*¥|¥h¥w*::'
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" 閉じ括弧を自動補完
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<left>

" snippetを<Tab> にマッピング
imap <expr><Tab> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<Tab>"
" 1番目の候補を自動選択
let g:neocomplcache_enable_auto_select = 1
" 補完候補が表示されている場合は確定。そうでない場合は改行
inoremap pumvisible() ? neocomplcache#close_popup() : "¥"
" エディットのエイリアス
noremap snip :<C-u>NeoComplCacheEditSnippets<CR>
" スニペット保管場所
let g:neocomplcache_snippets_dir = '~/.vim/snippets'
" 補完をキャンセル
inoremap <expr><C-e>  neocomplcache#cancel_popup()
inoremap <expr><Right> pumvisible() ? neocomplcache#cancel_popup() : "\<Right>"
" set quickrun command
let g:quickrun_config = {}
let g:quickrun_config.markdown = {
    \ 'outputter':'null',
    \ 'command':'open',
    \ 'cmdopt':'-a',
    \ 'args':'Marked',
    \ 'exec':'%c %o %a %s',
    \ }
let g:quickrun_config._ = {'runner' : 'vimproc', "outputter/buffer/into" : 1}
let g:quickrun_config['ruby.rspec'] = { 'command': 'rspec', 'cmdopt': 'bundle exec foreman run --root=../..', 'exec': '%o %c %s'}
augroup RSpec
  autocmd!
  autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END

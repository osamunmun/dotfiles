"vundle 対応
set nocompatible
"Please set your own Neobundle directory.
if has('vim_starting')
  set runtimepath+=~/.dotfiles/vim/vimfiles/bundle/neobundle.vim
endif
"call neobundle#rc(expand('~/.vim/bundle/'))
call neobundle#begin(expand('~/.dotfiles/vim/vimfiles/bundle/'))
  NeoBundleFetch 'http://github.com/Shougo/neobundle.vim'

  NeoBundle 'http://github.com/Shougo/vimproc'
  NeoBundle 'http://github.com/Shougo/unite.vim'
  NeoBundle 'http://github.com/Shougo/neomru.vim'
  NeoBundle 'http://github.com/Shougo/vimfiler'
  NeoBundle 'http://github.com/Shougo/neosnippet'
  NeoBundle 'http://github.com/Shougo/neosnippet-snippets'
  NeoBundle 'http://github.com/Shougo/vimshell.git'
  NeoBundle 'http://github.com/tpope/vim-rails.git'
  NeoBundle 'http://github.com/Shougo/neocomplcache'
  NeoBundle 'http://github.com/nathanaelkane/vim-indent-guides'
  NeoBundle 'http://github.com/thinca/vim-quickrun.git'
  NeoBundle 'http://github.com/vim-scripts/ref.vim'
  NeoBundle 'http://github.com/bling/vim-airline'
  NeoBundle 'http://github.com/itchyny/lightline.vim.git'
  NeoBundle 'http://github.com/vim-ruby/vim-ruby'
  NeoBundle 'http://github.com/scrooloose/syntastic'
  NeoBundle 'http://github.com/tomtom/tcomment_vim'
  NeoBundle 'http://github.com/kana/vim-surround'
  NeoBundle 'http://github.com/vim-scripts/grep.vim.git'
  NeoBundle 'http://github.com/vim-scripts/sudo.vim.git'
  NeoBundle 'http://github.com/LeafCage/foldCC.git'
  NeoBundle 'http://github.com/vim-scripts/ruby-matchit.git'
  NeoBundle 'http://github.com/tpope/vim-endwise'
  NeoBundle 'http://github.com/vim-scripts/yanktmp.vim.git'
  NeoBundle 'http://github.com/h1mesuke/vim-alignta.git'
  NeoBundle 'http://github.com/slim-template/vim-slim.git'
  NeoBundle 'http://github.com/tomasr/molokai.git'
  NeoBundle 'http://github.com/vim-scripts/twilight.git'
  NeoBundle 'http://github.com/chase/vim-ansible-yaml.git'
  NeoBundle 'http://github.com/tpope/vim-fugitive.git'
  NeoBundle 'http://github.com/airblade/vim-gitgutter.git'
  NeoBundle 'http://github.com/kchmck/vim-coffee-script.git'
  NeoBundle 'http://github.com/hynek/vim-python-pep8-indent'
  NeoBundle 'http://github.com/kevinw/pyflakes-vim.git'
call neobundle#end()
NeoBundleCheck

filetype plugin on
filetype indent on

"for python
autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Color Scheme
colorscheme molokai
syntax on

set expandtab
set shiftwidth=2
set number
set showmatch
set clipboard=unnamed,autoselect
set ts=2 sw=2 et
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237

autocmd BufRead,BufNewFile  *.md,*.MD set filetype=markdown
"保存時に行末の空白を自動で削除
autocmd BufWritePre * :%s/\s\+$//e

"Syntax check
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1

"for vimfiler keymap
"vimデフォルトのエクスプローラをvimfilerで置き換える
let g:vimfiler_as_default_explorer = 1
"セーフモードを無効にした状態で起動する
let g:vimfiler_safe_mode_by_default = 0
"現在開いているバッファをIDE風に開く
nnoremap <silent> <Leader>f :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

"unite prefix key.
nnoremap [unite] <Nop>
nmap <Space>f [unite]
"bookmarkだけホームディレクトリに保存
let g:unite_source_bookmark_directory = $HOME . '/.unite/bookmark'
"現在開いているファイルのディレクトリ下のファイル一覧。
"開いていない場合はカレントディレクトリ
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"バッファ一覧
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
"レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
"最近使用したファイル一覧
nnoremap <silent> [unite]h :<C-u>Unite file_mru<CR>
"ブックマーク一覧
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
"ブックマークに追加
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>

"neocomplcache用（自動補完）
let g:neocomplcache_enable_at_startup = 1
"区切りの補完を有効化
let g:neocomplcache_enable_underbar_completion = 1
" シンタックスをキャッシュするときの最小文字長を3
let g:neocomplcache_min_syntax_length = 3
"Enable heavy omni completion. ruby用
 if !exists('g:neocomplcache_omni_patterns')
   let g:neocomplcache_omni_patterns = {}
 endif
 let g:neocomplcache_omni_patterns.ruby = '[^. *¥t]¥.¥w*¥|¥h¥w*::'
 autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" snippetを<Tab> にマッピング
" imap <expr><Tab> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<Tab>"
" 1番目の候補を自動選択
let g:neocomplcache_enable_auto_select = 1
" 補完候補が表示されている場合は確定。そうでない場合は改行
inoremap pumvisible() ? neocomplcache#close_popup() : "¥"
" エディットのエイリアス
noremap snip :<C-u>NeoComplCacheEditSnippets<CR>
" スニペット保管場所
let g:neocomplcache_snippets_dir = '~/.vim/snippets'
" 補完をキャンセル
inoremap <expr><C-e>  neocomplcache#cancel_popup()
inoremap <expr><Right> pumvisible() ? neocomplcache#cancel_popup() : "\<Right>"
let g:quickrun_config = {}
let g:quickrun_config.markdown = {
    \ 'outputter':'null',
    \ 'command':'open',
    \ 'cmdopt':'-a',
    \ 'args':'Marked',
    \ 'exec':'%c %o %a %s',
    \ }
let g:quickrun_config._ = {'runner' : 'vimproc', "outputter/buffer/into" : 1}
let g:quickrun_config['ruby.rspec'] = { 'command': 'rspec', 'cmdopt': 'bundle exec foreman run --root=../..', 'exec': '%o %c %s'}
augroup RSpec
  autocmd!
  autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END

" qfixsetting
set runtimepath+=~/.dotfiles/vim/qfixapp
" QuickFixウィンドウでもプレビューや絞り込みを有効化
let QFixWin_EnableMode = 1
" QFixHowm/QFixGrepの結果表示にロケーションリストを使用する/しない
let QFix_UseLocationList = 1
"Grepコマンドのキーマップ
let MyGrep_Key  = 'g'
"Grepコマンドの2ストローク目キーマップ
let MyGrep_KeyB = ''

" airline settings
" Powerlineの設定
set laststatus=2
" let g:Powerline_symbols = 'fancy'
set t_Co=256
let g:airline_powerline_fonts = 1
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'readonly': 'MyReadonly',
      \   'modified': 'MyModified',
      \   'filename': 'MyFilename',
      \   'gitgutter': 'MyGitGutter'
      \ }
      \ }

function! MyModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤"
  else
    return ""
  endif
endfunction

function! MyFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction
